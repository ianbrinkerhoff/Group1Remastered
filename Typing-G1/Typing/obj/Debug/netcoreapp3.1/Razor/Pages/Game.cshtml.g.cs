#pragma checksum "C:\Users\ianbr\Desktop\CS3750\Group1Remastered\Typing-G1\Typing\Pages\Game.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4803023636d13cf7d367017b3e075965d3fbc924"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(Typing.Pages.Pages_Game), @"mvc.1.0.razor-page", @"/Pages/Game.cshtml")]
namespace Typing.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\ianbr\Desktop\CS3750\Group1Remastered\Typing-G1\Typing\Pages\_ViewImports.cshtml"
using Typing;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4803023636d13cf7d367017b3e075965d3fbc924", @"/Pages/Game.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b58f7fd1c281f4de1466f65b79606e943a1885af", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Game : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral(@"    <div id=""gameScreen"">
        <div class=""left"" id=""p1"">
            <h2>Player 1</h2>
                <div class=""wordBox"" style=""top:80px""><p id=""1"">BASEBALL</p></div>
                <div class=""wordBox"" style=""top:160px""><p id=""2"">RACECAR</p></div>
                <div class=""wordBox"" style=""top:240px""><p id=""3"">CACTUS</p></div> 
                <div class=""wordBox"" style=""top:320px""><p id=""4"">SAMURAI</p></div> 
                <div class=""wordBox"" style=""top:400px""><p id=""5"">CAT</p></div>
                <h2 id=""finalMsg"">Game Over</h2>

        </div>

        <div class=""right"" id=""p2"">
            <h2>Player 2</h2>
            <div class=""wordBox"" style=""top:80px""><p id=""6"">BASEBALL</p></div>
            <div class=""wordBox"" style=""top:160px""><p id=""7"">RACECAR</p></div>
            <div class=""wordBox"" style=""top:240px""><p id=""8"">CACTUS</p></div>
            <div class=""wordBox"" style=""top:320px""><p id=""9"">SAMURAI</p></div>
            <div class=""wordBox"" style=""top:400px""><p id");
            WriteLiteral(@"=""10"">CAT</p></div>
        </div>
    </div>

<script src=""https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""></script>

<script>

    //PLAYER 1 SIDE USING LOOP
    $('#p1').click(function () {

        var size = 20;

        var $div = $('#p1'),
            docHeight = $div.height(),
            docWidth = $div.width();


        var int = setInterval(function () { 

            size += 20;

            $.each($('#p1'), function (i, left) {
                $('div', left).each(function () {

                    $(this).css({
                        //'font-size': size + 'px',
                        'position': 'absolute',
                        'left': size + 'px'
                        //'left': Math.floor(Math.random() * (docWidth - 100)) + 1 + 'px',
                        //'top': Math.floor(Math.random() * (docHeight -100)) + 1 + 'px',
                    });
                    if (size < (docWidth / 3)) {
                        $(this).css({
     ");
            WriteLiteral(@"                       'color': 'green'
                        });
                    } else if (size <= ((docWidth / 3) * 2) - 50) {
                        $(this).css({
                            'color': 'orange'
                        });
                    } else if (size <= (docWidth - 100)) {
                        $(this).css({
                            'color': 'red'
                        });
                    } else {
                        clearInterval(int);
                        $(this).css({
                            'font-weight': 'bold',
                            'font-size': '30px'
                        });
                        $('#finalMsg').css({
                            'visibility': 'visible',
                            'left': (docWidth / 2) + 'px',
                            'top': (docHeight / 2) + 'px'
                        });
                    }
                    
                })  
            });

        }, 1000);
 ");
            WriteLiteral(@"   });

//PLAYER 2 SIDE USING ANIMATE
    $('#p1').click(function () {

        var $div = $('#gameScreen'),
            fullWidth = $div.width(),
            num = 0;

        var color = setInterval(function () {
            num++;
            $.each($('#p2'), function (i, left) {
                $('div', left).each(function () {
                    if (num == 1) {
                        $(this).css({
                            'color': 'orange'
                        });
                    } else if (num == 2) {
                        $(this).css({
                            'color': 'red'
                        });
                        clearInterval(color);
                    }
                });
            }) 
        }, 6666);

       
        $.each($('#p2'), function (i, left) {
            $('div', left).each(function () {
                $(this).css({
                    'position': 'absolute'
                });

                $(this).animate({ left:");
            WriteLiteral(@" (fullWidth - 100) + 'px' }, 20000);

            });
        })  
    });

</script>

<style>

    /* Control the left side */
    .left {
        width: 50%;
        float: left;
        background-color: whitesmoke;
        min-height: 100%;
        margin:0;
    }

    /* Control the right side */
    .right {
        width: 50%;
        float: right;
        background-color: lightgray;
        min-height: 100%;
        margin: 0;
    }

    html, body {
        height: 100%;
        margin: 0;
    }

    body {
        background-color: white;
        margin: 0 auto;
        position: relative;
        width: 100%;
        height: 100%;
    }

    header {
        display: block;
        width: 100%;
        height: 54px;
    }

    #gameScreen {
        border: 1px black solid;
        width: 100%;
        position: absolute;
        top: 54px;
        bottom: 60px;
        left: 0;
    }

    h2 {
        text-align: center;
    }

    .wordB");
            WriteLiteral("ox{\r\n        height: 50px;\r\n        width: 100px;\r\n        margin: 5px;\r\n        color:green;\r\n    }\r\n\r\n    #finalMsg{\r\n        visibility:collapse;\r\n    }\r\n\r\n    p{\r\n        text-align:center;\r\n        margin:auto;\r\n    }\r\n\r\n</style>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Typing.Pages.GameModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Typing.Pages.GameModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<Typing.Pages.GameModel>)PageContext?.ViewData;
        public Typing.Pages.GameModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
